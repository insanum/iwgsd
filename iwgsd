#!/usr/bin/env node

var version = "v0.1";
var author  = "Eric Davis <https://github.com/insanum>"

var os     = require('os')
var fs     = require('fs')
var path   = require('path')
var _      = require('lodash')
var yaml   = require('js-yaml')
var chalk  = require('chalk')
var ap     = require('argparse')
var moment = require('moment')
var later  = require('later')
var spawn  = require('cross-spawn');

var cl  = (msg) => { console.log(msg); };
var err = (msg, bail=true) => { cl(chalk.red(`ERROR: ${msg}`));
                                if (bail) process.exit(1); }

var iwgsd_cfg = 'iwgsd.yaml';

var cmd = path.basename(process.argv[1]);

var pargs = new ap.ArgumentParser({ version: version });

pargs.addArgument('-c',
                  {
                      nargs: 1,
                      metavar: "<config.yaml>",
                      help: "Config file (default './iwgsd.yaml')."
                  });
pargs.addArgument('-x',
                  {
                      action: "storeTrue",
                      help: "Include list items marked as done."
                  });
pargs.addArgument('-L',
                  {
                      action: "storeTrue",
                      help: "List all locations."
                  });
pargs.addArgument('-l',
                  {
                      nargs: 1,
                      action: "append",
                      metavar: "<location>",
                      help: "Filter on location."
                  });
pargs.addArgument('-T',
                  {
                      action: "storeTrue",
                      help: "List all tags."
                  });
pargs.addArgument('-t',
                  {
                      nargs: 1,
                      action: "append",
                      metavar: "<tag>",
                      help: "Filter on tag."
                  });
pargs.addArgument('-N',
                  {
                      action: "storeTrue",
                      help: "List notifications (dry run for '-n')."
                  });
pargs.addArgument('-n',
                  {
                      action: "storeTrue",
                      help: "Send notifications."
                  });

var args = pargs.parseArgs();

var notification_app = `${process.env.HOME}/pushover_iwgsd`;

function parseFile(fname, ext = path.extname(fname)) {
    if (ext !== ".yaml")
        err(`File '${fname}' must be a YAML file`);
    if (!fs.existsSync(fname))
        err(`File '${fname}' does not exist`);
    var options = { json: true };
    return yaml.load(fs.readFileSync(fname, "utf-8"), options);
}

if (args.c)
    iwgsd_cfg = args.c;

var iwgsd = parseFile(iwgsd_cfg);

var task_complete = '[x]';
var rgx_list_item = /^\s*([-*+]|\d\.)(?:\s+(\[[ x]\]))?\s+.*$/;

var rgx_location     = /\s@(\w+)(?=\s|$)/g;
var rgx_location_clr = /\s(@\w+)(?=\s|$)/g;

var rgx_tag     = /\s#(\w+)(?=\s|$)/g;
var rgx_tag_clr = /\s(#\w+)(?=\s|$)/g;

var rgx_notify     = /\s{([-+])\s+(.+)}(?=\s|$)/;
var rgx_notify_clr = /\s({[-+]\s+.+})(?=\s|$)/;

var locations = [ ];
function getLocations(lines) {
    _.forEach(lines, function (line) {
        if (!line.match(rgx_list_item)) return;
        var loc_match;
        while ((loc_match = rgx_location.exec(line)) !== null) {
            locations.push(loc_match[1]);
        }
    });
}

var location_filter = [ ];
function filterLocations(lines, locations) {
    _.forEach(lines, function (line, k) {
        var list_match = line.match(rgx_list_item);
        if (!list_match || (!args.x && (list_match[2] === task_complete)))
            return;
        _.forEach(locations, function (loc) {
            if (line.match(RegExp(`\\s@${loc}(\\b|$)`))) {
                location_filter.push(`${k+1}:${_.trim(line)}`);
                return false;
            }
        });
    });
}

var tags = [ ];
function getTags(lines) {
    _.forEach(lines, function (line) {
        if (!line.match(rgx_list_item)) return;
        var tag_match;
        while ((tag_match = rgx_tag.exec(line)) !== null) {
            tags.push(tag_match[1]);
        }
    });
}

var tag_filter = [ ];
function filterTags(lines, tags) {
    _.forEach(lines, function (line, k) {
        var list_match = line.match(rgx_list_item);
        if (!list_match || (!args.x && (list_match[2] === task_complete)))
            return;
        _.forEach(tags, function (tag) {
            if (line.match(RegExp(`\\s#${tag}(\\b|$)`))) {
                tag_filter.push(`${k+1}:${_.trim(line)}`);
                return false;
            }
        });
    });
}

var notifications = [ ];
function getNotifications(lines) {
    // XXX allow notifications in last 30 mins
    var now   = moment();
    var grace = now.clone().subtract(30, 'minutes');

    // deal with localtime (not UTC)
    later.date.localTime();

    _.forEach(lines, function (line, k) {
        var list_match = line.match(rgx_list_item);
        if (!list_match || (!args.x && (list_match[2] === task_complete)))
            return;

        notify_match = line.match(rgx_notify);
        if (!notify_match) return;

        // skip a notification that has the notify ignore flag set
        if (notify_match[1] === '-') return;

        //cl(`${notify_match[0]} -> ${notify_match[1]} "${notify_match[2]}"`);

        var notify = later.parse.text(notify_match[2]);
        if (notify.error !== -1) {
            err(`Invalid notification text at index ${notify.error}: ` +
                `"${notify_match[2]}"`, false);
            return;
        }

        // if there are schedules in the grace period range then ok
        var schedules = later.schedule(notify).prev(1,
                                                    now.toDate(),
                                                    grace.toDate());
        if (schedules) {
            notifications.push(`${k+1}:${_.trim(line)}`);
            return;
        }
    });
}

function forEachFile(workFunc, args) {
    _.forEach(iwgsd, function (f) {
        if (!fs.existsSync(f))
            err(`File '${f}' does not exist`);
        workFunc(fs.readFileSync(f, "utf-8").toString().split(os.EOL), args);
    });
}

/* pretty print the line with syntax highlights */
function ppLine(text) {
    text = text.replace(rgx_location_clr,
                        ` ${chalk.yellow.bgBlack.bold('$1')}`);
    text = text.replace(rgx_tag_clr,
                        ` ${chalk.blue.bgBlack.bold('$1')}`);
    text = text.replace(rgx_notify_clr,
                        ` ${chalk.green.bgBlack.bold('$1')}`);
    cl(text);
}

if (args.L) {

    /* dump a list of all the locations */
    forEachFile(getLocations);
    _.forEach(_.uniq(locations.sort()), function (v) { cl(v); });

} else if (args.l) {

    /* filter on a set of locations */
    forEachFile(filterLocations, _.uniq(_.flatten(args.l)));
    _.forEach(location_filter, ppLine);

} else if (args.T) {

    /* dump a list of all the tags */
    forEachFile(getTags);
    _.forEach(_.uniq(tags.sort()), function (v) { cl(v); });

} else if (args.t) {

    /* filter on a set of tags */
    forEachFile(filterTags, _.uniq(_.flatten(args.t)));
    _.forEach(tag_filter, ppLine);

} else if (args.N || args.n) {

    /* list the notifications that would be sent */
    forEachFile(getNotifications);
    _.forEach(notifications, function (v) {
        if (args.N) {
            ppLine(v);
            return;
        }

        /* send the notification (XXX individual or single?) */
        spawn.sync(notification_app, [ v ], { stdio: 'inherit' });
    });

} else {
    pargs.error('argument required');
}

